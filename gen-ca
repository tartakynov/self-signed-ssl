#!/bin/bash

# Directories
THIS=$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null||echo $0)
DIR=$(dirname "${THIS}")
scriptName=$(basename "${THIS}")

# Certificate Variables
VERBOSE=0
DURATION=365 # 1 year

# Load common functions
source "$DIR/common.sh"

# Help Screen
help() {
  echo -n "${scriptName} [OPTIONS] -c=US

Generate self-signed root CA using OpenSSL

 Options:
  -c|--country         Country Name (2 letter code)
  -o|--organization    Organization Name (eg, company)
  -n|--common-name     Common Name (e.g. server FQDN or YOUR name)
  -p|--path            Path to output generated keys
  -d|--duration        Validity duration of the certificate (in days)
  -h|--help            Display this help and exit
  -v|--verbose         Verbose output
"
}

# Prompt for variables that were not provided in arguments
checkVariables() {
  # Country
  if [ -z "$C" ]; then
    echo -n "Country Name (2 letter code) [AU]: "
    read -r C
  fi

  # Organization
  if [ -z "$O" ]; then
    echo -n "Organization Name (eg, company) [Internet Widgits Pty Ltd]: "
    read -r O
  fi

  # Common Name
  if [ -z "$CN" ]; then
    echo -n "Common Name (e.g. server FQDN or YOUR name) []: "
    read -r CN
  fi
}

# Build root CA certificate
build() {
  # Set OUTPATH if not yet
  if [ -z "$OUTPATH" ]; then
    OUTPATH="$DIR/out/root/${FILENAME}"
    mkdir -p $OUTPATH
  fi

  # Generate CA key & crt
  openssl genrsa -out "${OUTPATH}/ca.key" 2048
  openssl req -x509 -new -nodes -key "${OUTPATH}/ca.key" -sha256 -days "${DURATION}" -out "${OUTPATH}/ca.pem" -subj "/C=${C}/O=${O}/CN=${CN}"
}

# Process Arguments
while [ "$1" != "" ]; do
  PARAM=$(echo "$1" | awk -F= '{print $1}')
  VALUE=$(echo "$1" | awk -F= '{print $2}')
  case $PARAM in
    -h|--help) help; safeExit ;;
    -c|--country) C=$VALUE ;;
    -o|--organization) O=$VALUE ;;
    -n|--common-name) CN=$VALUE ;;
    -p|--path) OUTPATH=$VALUE; testPath ;;
    -d|--duration) DURATION=$VALUE ;;
    -v|--verbose) VERBOSE=1 ;;
    *) echo "ERROR: unknown parameter \"$PARAM\""; help; exit 1 ;;
  esac
  shift
done

checkVariables
sanitize
build
safeExit
