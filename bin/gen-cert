#!/bin/bash

# Load common functions
source "${0%/*}/_common.sh"

# Help Screen
help() {
  echo -n "${scriptName} [OPTIONS] -n=qwerty.com

Generate self-signed TLS certificate using OpenSSL

 Options:
  -n|--common-name     Common Name (e.g. server FQDN or YOUR name)
  -c|--ca-cert         CA certificate path
  -k|--ca-key          CA certificate key
  -a|--alt-dns         Alt DNS Names (comma separated, no space)
  -p|--path            Path to output generated keys
  -d|--duration        Validity duration of the certificate (in days)
  -h|--help            Display this help and exit
  -v|--verbose         Verbose output
"
}

buildCsrCnf() {
cat << EOF > "${OUTPATH}/${FILENAME}.csr.cnf"
[req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn

[dn]
CN=${CN}
EOF
}

buildExtCnf() {
cat << EOF > "${OUTPATH}/v3.ext"
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
EOF

i=1
for dns in $(echo $DNS | tr ',' '\n'); do
  echo "DNS.${i} = ${dns}" >> "${OUTPATH}/v3.ext"
  ((i++))
done
echo "DNS.${i} = ${CN}" >> "${OUTPATH}/v3.ext"
}

# Prompt for variables that were not provided in arguments
checkVariables() {
  # Common Name
  if [ -z "$CN" ]; then
    echo -n "Common Name (e.g. server FQDN or YOUR name) []: "
    read -r CN
  fi

  # Alt names
  if [ -z "$DNS" ]; then
    echo -n "Alt DNS (Alt DNS Names, comma separated, no space) []: "
    read -r DNS
  fi

  # Select CA key & crt
  if [ -z "$CA_cert" ] || [ -z "$CA_key" ]; then
    printf "Please select root CA certificate folder:\n"
    select d in $DIR/../out/root/*/; do
      test -n "$d" && break
      echo "> Invalid Number"
    done

    CA_key="${d}ca.key"
    CA_cert="${d}ca.pem"
    CA_srl="${d}ca.srl"
  else
    d=$(dirname "$CA_cert")
    CA_srl="${d}ca.srl"
  fi
}

# Build TLS Certificate
build() {
  # Set OUTPATH if not yet
  if [ -z "$OUTPATH" ]; then
    OUTPATH="$DIR/../out/certificates/${FILENAME}"
    mkdir -p $OUTPATH
  fi

  # CSR Configuration
  buildCsrCnf

  # Create v3.ext configuration file
  buildExtCnf

  # Server key
  openssl req -new -sha256 -nodes -out "${OUTPATH}/${FILENAME}.csr" -newkey rsa:2048 -keyout "${OUTPATH}/${FILENAME}.key" -config <( cat "${OUTPATH}/${FILENAME}.csr.cnf" )

  # Server certificate
  openssl x509 -req -in "${OUTPATH}/${FILENAME}.csr" -CA "${CA_cert}" -CAkey "${CA_key}" -CAserial "${CA_srl}" -CAcreateserial -out "${OUTPATH}/${FILENAME}.crt" -days "${DURATION}" -sha256 -extfile "${OUTPATH}/v3.ext"
}

# Process Arguments
while [ "$1" != "" ]; do
  PARAM=$(echo "$1" | awk -F= '{print $1}')
  VALUE=$(echo "$1" | awk -F= '{print $2}')
  case $PARAM in
    -h|--help) help; safeExit ;;
    -n|--common-name) CN=$VALUE ;;
    -c|--ca-cert) CA_cert=$VALUE ;;
    -k|--ca-key) CA_key=$VALUE ;;
    -a|--alt-dns) DNS=$VALUE ;;
    -p|--path) OUTPATH=$VALUE; testPath ;;
    -d|--duration) DURATION=$VALUE ;;
    -v|--verbose) VERBOSE=1 ;;
    *) echo "ERROR: unknown parameter \"$PARAM\""; help; exit 1 ;;
  esac
  shift
done

checkVariables
sanitize
build
safeExit
